O que é Docker?

É uma ferramenta que se apoia em recursos existentes no kernel, inicialmente Linux, para isolar
a execução de processos. As ferramentas que o Docker traz são basicamente uma camada de
administração de containers, baseado originalmente no LXC.

Alguns isolamentos possíveis
• Limites de uso de memória
• Limites de uso de CPU
• Limites de uso de I/O
• Limites de uso de rede
• Isolamento da rede (que redes e portas são acessíveis)
• Isolamento do file system
• Permissões e Políticas
• Capacidades do kernel

Por que não uma VM?

O Docker tende a utilizar menos recursos que uma VM tradicional, um dos motivos é não precisar de
uma pilha completa como vemos em Comparação VMs × Containers. O Docker utiliza o mesmo
kernel do host, e ainda pode compartilhar bibliotecas.

O que são containers?

Container é o nome dado para a segregação de processos no mesmo kernel, de forma que o processo
seja isolado o máximo possível de todo o resto do ambiente.
Em termos práticos são File Systems, criados a partir de uma "imagem" e que podem possuir
também algumas características próprias.

    *Os containers tem que ser o mais minimalistas possiveis!!!
    *Os containers tem que ser os mais segregados  possiveis!!!
    

 O que são imagens Docker ?

 Uma imagem Docker é a materialização de um modelo de um sistema de arquivos, modelo este
produzido através de um processo chamado build.


Um container normalmente roda com o máximo de isolamento possível do host, este isolamento é
possível através do Docker Engine e diversas características provídas pelo kernel.
Mas normalmente não queremos um isolamento total, e sim um isolamento controlado, em que os
recursos que o container terá acesso são explicitamente indicados.
Principais recursos de controle do isolamento
• Mapeamento de portas
• Mapeamento de volumes
• Copia de arquivos para o container ou a partir do container
• Comunicação entre os containers


Agora que já vimos diversos comandos, incluindo tanto a sintaxe nova quanto a velha, podemos
entender os principais motivos para esta mudança e a preferência pela nova sintaxe:
• Melhor utilização de comandos similares em contextos diferentes:
    ◦ docker container ls
    ◦ docker image ls
    ◦ docker volume ls
• Maior clareza nos comandos:
    ◦ docker container rm ao invés de docker rm
    ◦ docker image rm ao inveś de docker rmi
    ◦ docker image ls ao invés de docker images
• Mais simplicidade para criação de novos subcomandos
• Segregação da documentação e helps por contexto


